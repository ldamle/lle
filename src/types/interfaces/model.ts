import * as Types from '../../types';

interface Model {
    // Массив генераторов для моделирования
    generators: Element[];

    // Объект времени, содержащий текущее время, частоту, начало/конец моделирования и конец паттерна
    time: Types.model.time;

    // Таблица моделирования, содержащая элементы, их состояние и время текущего состояния
    model_table: Types.model.stateArray[];

    // Автоматически устанавливает частоту моделирования по частотам генераторов
    autoFreq(): void;

    // Автоматически устанавливает конец паттерна (наверное с триггерами плохо будет работать)
    autoPatternEnd(): void;

    // Переходит к следующему такту, записывая поведение всех элементов текущего
    modelNext(): void;

    // Моделируем весь паттерн до конца
    modelPattern(): void;

    // Моделируем все до конца
    modelAll(): void;

    // Удаляет текущий такт и его состояние модели. Может быть полезно при изменении входов-выходов.
    deleteNowModel(): void;

    // Удаляет все моделирование
    deleteModel(): void;

    // Удаляет и еще раз выполняет текущий такт
    remodelNow(): void;

    // Удаляет все отмоделированное и еще раз выполняет
    remodelAll(): void;

    /**
     * Находит сигнал выхода по соединению
     * @param out Соединение
     * @returns Массив сигналов для данного соединения
     */
    findOutput(out: Types.Interface.Connection): Types.signal.it;

    /**
     * Находит сигнал выхода по соединению с указанием времени
     * @param out Соединение
     * @returns Массив объектов, содержащих время и сигнал
     */
    findOutputT(out: Types.Interface.Connection): Types.model.stateArray;

    /**
     * Находит все выходные сигналы по элементу
     * @param element Элемент
     * @returns Массив сигналов для данного элемента (текущее)
     */
    findElement(element: Element): string;

    /**
     * Находит все выходные сигналы по элементу с указанием времени
     * @param out Элемент
     * @returns Массив объектов, содержащих время и массив сигналов
     */
    findElementT(out: Element): Types.model.stateArray;
}

export {Model};
